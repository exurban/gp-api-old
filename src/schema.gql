# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Location {
  id: ID!
  name: String!
  tag: String!
  photos: [Photo!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Collection {
  id: ID!
  name: String!
  tag: String!
  description: String!
  photosInCollection: [PhotoCollection!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoCollection {
  collectionId: Collection!
  collection: Collection!
  photoId: Photo!
  photo: Photo!
}

type Image {
  id: ID!
  imageUrl: String!
  altText: String!
  fileType: String!
  fileExtension: String!
  size: String!
  width: Int!
  height: Int!
  photo: Photo!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Photographer {
  id: ID!

  # Derived field that returns `${firstName} ${lastName}`
  name: String!

  # The artist's first name.
  firstName: String!

  # The artist's last name.
  lastName: String!

  # The artist's email address.
  email: String!

  # The URL for the artist's portrait.
  photoUrl: String!

  # The artist's biography.
  bio: String!

  # Photos attributed to the artist.
  photos: [Photo!]!

  # Date record was created.
  createdAt: DateTime!

  # Date record was most recently updated.
  updatedAt: DateTime!
}

type Subject {
  id: ID!
  name: String!
  photosOfSubject: [PhotoSubject!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoSubject {
  subjectId: Subject!
  subject: Subject!
  photoId: Photo!
  photo: Photo!
}

type Tag {
  id: ID!
  name: String!
  photosWithTag: [PhotoTag!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoTag {
  tagId: Tag!
  tag: Tag!
  photoId: Photo!
  photo: Photo!
}

type UserShoppingBagItem {
  userId: User!
  user: User!
  photoId: Photo!
  photo: Photo!
}

type Finish {
  id: ID!
  name: String!
  description: String!
  photoUrl: String!

  # finSku: Finish SKU. imgSku + finSku = ProductSku.
  finSku: String
  width: Float!
  height: Float!
  depth: Float!
  weight: Float!
  shippingWeight: Float!
  basePrice: Float!
  priceModifier: Float!
  photosWithFinish: [PhotoFinish!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  finishSku: String!
}

type PhotoFinish {
  finishId: Finish!
  finish: Finish!
  photoId: Photo!
  photo: Photo!
}

type Photo {
  id: ID!
  skuGenerator: Int!
  sku: Int!
  title: String!
  description: String!
  isDiscontinued: Boolean!
  isFeatured: Boolean!
  isLimitedEdition: Boolean!
  rating: Int!
  basePrice: Float
  priceModifier: Float
  photographer: Photographer!
  location: Location!
  images: [Image!]!
  subjectsInPhoto: [PhotoSubject!]!
  tagsForPhoto: [PhotoTag!]!
  collectionsForPhoto: [PhotoCollection!]!
  finishesForPhoto: [PhotoFinish!]!
  favoritedByUsers: [UserFavorite!]!
  inShoppingBagsOfUsers: [UserShoppingBagItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserFavorite {
  userId: User!
  user: User!
  photoId: Photo!
  photo: Photo!
}

type User {
  id: ID!
  name: String!
  email: String!
  email_verified: DateTime
  image: String
  roles: [String!]!
  isSubscribed: Boolean!
  userFavorites: [UserFavorite!]!
  userShoppingBagItems: [UserShoppingBagItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CollectionInput {
  name: String!
  tag: String!
  description: String!
}

input CollectionUpdateInput {
  name: String
  tag: String
  description: String
}

input FinishInput {
  name: String!
  description: String!
  photoUrl: String!
  finSku: String!
  width: Float!
  height: Float!
  depth: Float!
  weight: Float!
  shippingWeight: Float!
  basePrice: Float!
  priceModifier: Float!
}

input FinishUpdateInput {
  name: String
  description: String
  photoUrl: String
  finSku: String
  width: Float
  height: Float
  depth: Float
  weight: Float
  shippingWeight: Float
  basePrice: Float
  priceModifier: Float
}

input LocationInput {
  name: String!
  tag: String!
}

input LocationUpdateInput {
  name: String
  tag: String
}

input PhotoCollectionInput {
  photoId: Int!
  collectionId: Int!
}

input PhotoFinishInput {
  photoId: Int!
  finishId: Int!
}

input PhotographerInput {
  firstName: String!
  lastName: String!
  email: String!
  bio: String!
  photoUrl: String!
}

input PhotographerUpdateInput {
  firstName: String
  lastName: String
  email: String
  bio: String
  photoUrl: String
}

input PhotoInput {
  title: String!
  description: String!
  isFeatured: Boolean
  isLimitedEdition: Boolean
  rating: Int
  basePrice: Float!
  priceModifier: Float
  photographerId: Float!
  locationId: Float!
}

input PhotoUpdateInput {
  title: String
  description: String
  subjects: [String!]
  tags: [String!]
  discontinued: Boolean
  isFeatured: Boolean
  isLimitedEdition: Boolean
  rating: Int
  basePrice: Float
  priceModifier: Float
  photographerId: Float
  locationId: Float
}

input SubjectInput {
  name: String!
}

input SubjectUpdateInput {
  name: String
}

input TagInput {
  name: String!
}

input TagUpdateInput {
  name: String
}

input GetApiTokenInput {
  userId: Float!
  email: String!
}

type Query {
  collections: [Collection!]!
  collectionsWithPhotos: [Collection!]!
  collection(id: Int!): Collection!
  collectionWithPhotos(id: Int!): Collection!
  finishes: [Finish!]!
  finishesWithPhotos: [Finish!]!
  finish(id: Int!): Finish
  finishWithPhotos(id: Int!): Finish
  locations: [Location!]!
  location(id: Int!): Location
  photosTakenAtLocation(id: Int!): Location
  photographers: [Photographer!]!
  photographer(id: Int!): Photographer
  photos: [Photo!]!
  featuredPhotos: [Photo!]!
  photo(id: Int!): Photo!
  subjects: [Subject!]!
  subject(id: Int!): Subject!
  subjectWithName(input: SubjectInput!): Subject!
  tags: [Tag!]!
  photosWithTag(input: TagInput!): Tag!
  users: [User!]!
  user(id: Int!): User!
  userSummaries: [User!]!
  getUserFavorites: [UserFavorite!]!
  newsletterSubscribers: [User!]!
}

type Mutation {
  addCollection(input: CollectionInput!): Collection!
  updateCollection(input: CollectionUpdateInput!, id: Int!): Collection!
  deleteCollection(id: Int!): Boolean!
  addFinish(input: FinishInput!): Finish!
  updateFinish(input: FinishUpdateInput!, id: Int!): Finish
  deleteFinish(id: Int!): Boolean!
  addLocation(input: LocationInput!): Location!
  updateLocation(input: LocationUpdateInput!, id: Int!): Location
  deleteLocation(id: Int!): Boolean!
  addPhotoToCollection(input: PhotoCollectionInput!): Boolean!
  removePhotoFromCollection(input: PhotoCollectionInput!): Boolean!
  addFinishToPhoto(input: PhotoFinishInput!): Boolean!
  removeFinishFromPhoto(input: PhotoFinishInput!): Boolean!
  addPhotographer(input: PhotographerInput!): Photographer!
  updatePhotographer(input: PhotographerUpdateInput!, id: Int!): Photographer
  deletePhotographer(id: Int!): Boolean!
  addPhoto(input: PhotoInput!): Photo!
  updatePhoto(input: PhotoUpdateInput!, id: Int!): Photo!
  deletePhoto(id: Int!): Boolean!
  addSubject(input: SubjectInput!): Subject!
  updateSubject(input: SubjectUpdateInput!, id: Int!): Subject!
  deleteSubject(id: Int!): Boolean!
  addTag(input: TagInput!): Tag!
  updateTag(input: TagUpdateInput!, id: Int!): Tag!
  deleteTag(id: Int!): Boolean!
  getApiToken(input: GetApiTokenInput!): String!
  subscribeToNewsletter: Boolean!
  unsubscribeFromNewsletter: Boolean!
  addPhotoToFavorites(photoId: Float!): Boolean!
  removePhotoFromFavorites(photoId: Float!): Boolean!
  toggleUserFavorite(photoId: Float!): Boolean!
  addPhotoToShoppingBag(photoId: Float!): Boolean!
  removePhotoFromShoppingBag(photoId: Float!): Boolean!
}
