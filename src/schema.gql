# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Image {
  id: ID!
  imageName: String!
  fileExtension: String!
  imageUrl: String!
  altText: String!
  size: String!
  width: Int!
  height: Int!
  isPortrait: Boolean!
  isPanoramic: Boolean!
  photo: Photo
  createdAt: DateTime!
  updatedAt: DateTime!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Location {
  # The ID of the location. It is unique, numeric and automatically-generated.
  id: ID!

  # The name of the Location. It is required and must be unique.
  name: String!

  # A tag for the Location. It is required and must be unique.
  tag: String!

  # A description of the location, used as a vignette at the top of the Location's photos page.
  description: String!

  # Optional. A map of the location used in conenction with the vignette at the top of the Location's photos page.
  coverImage: Image

  # Nullable. An array of photos taken at the Location.
  photos: [Photo!]

  # Count of photos taken at the location on the site.
  countOfPhotos: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Collection {
  id: ID!
  name: String!
  tag: String!
  description: String!

  # Optional. An image of the tag used in connection with the vignetter at the top of the Tag's photos page.
  coverImage: Image
  photosInCollection: [PhotoCollection!]

  # Count of photos in the collection.
  countOfPhotos: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoCollection {
  collectionId: Collection!
  collection: Collection!
  photoId: Photo!
  photo: Photo!
}

type Photographer {
  id: ID!

  # The artist's full name
  name: String!

  # The artist's first name.
  firstName: String!

  # The artist's last name.
  lastName: String!

  # The artist's email address.
  email: String!

  # The Image for the artist's portrait.
  coverImage: Image

  # The artist's biography.
  bio: String!

  # Photos attributed to the artist.
  photos: [Photo!]

  # Count of photos attributed to the photographer on the site.
  countOfPhotos: Int!

  # Date record was created.
  createdAt: DateTime!

  # Date record was most recently updated.
  updatedAt: DateTime!
}

type Subject {
  id: ID!
  name: String!
  description: String

  # Optional. An image of the subject used in connection with the vignette at the top of the Subject's photos page.
  coverImage: Image
  photosOfSubject: [PhotoSubject!]

  # Count of photos of the subject on the site.
  countOfPhotos: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoSubject {
  subjectId: Subject!
  subject: Subject!
  photoId: Photo!
  photo: Photo!
}

type Tag {
  id: ID!

  # The name of the tag.
  name: String!

  # Optional. A description of the tag used in connection with the vignette at the top of the Tag's photo page.
  description: String!

  # Optional. An image of the tag used in connection with the vignette at the top of the Tag's photos page.
  coverImage: Image

  # A connection through a join table to the photos tagged with the tag.
  photosWithTag: [PhotoTag!]

  # Count of photos of the tag on the site.
  countOfPhotos: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoTag {
  tagId: Tag!
  tag: Tag!
  photoId: Photo!
  photo: Photo!
}

type UserShoppingBagItem {
  userId: User!
  user: User!
  photoId: Photo!
  photo: Photo!
}

type Finish {
  id: ID!

  # The name of the finish.
  name: String!

  # Optional. A description of the tag used in connection with the vignette for the finish.
  description: String

  # Optional. An image of the finish.
  coverImage: Image

  # SKU for the type of finish. Combined with width & height to create FinishSKU, which is auto-generated as a Field Resolver. ProductSKU = sku-finSku-heightxwidth
  finSku: String!
  width: Float!
  height: Float!
  depth: Float!
  weight: Float!
  shippingWeight: Float!
  basePrice: Float!
  priceModifier: Float!
  photosWithFinish: [PhotoFinish!]

  # Count of photos available with the finish.
  countOfPhotos: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  finishSku: String!
}

type PhotoFinish {
  finishId: Finish!
  finish: Finish!
  photoId: Photo!
  photo: Photo!
}

type Photo {
  id: ID!
  skuGenerator: Int!
  sku: Int!
  sortIndex: Int!
  title: String!
  description: String!
  isFeatured: Boolean!
  isLimitedEdition: Boolean!
  isHidden: Boolean!
  rating: Int!
  basePrice: Float
  priceModifier: Float
  photographer: Photographer
  location: Location
  images: [Image!]!
  subjectsInPhoto: [PhotoSubject!]
  tagsForPhoto: [PhotoTag!]
  collectionsForPhoto: [PhotoCollection!]
  finishesForPhoto: [PhotoFinish!]
  favoritedByUsers: [UserFavorite!]
  inShoppingBagsOfUsers: [UserShoppingBagItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserFavorite {
  userId: User!
  user: User!
  photoId: Photo!
  photo: Photo!
}

type User {
  id: ID!
  name: String!
  email: String!
  email_verified: DateTime
  image: String
  roles: [String!]!
  isSubscribed: Boolean!
  userFavorites: [UserFavorite!]!
  userShoppingBagItems: [UserShoppingBagItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SuccessMessageResponse {
  success: Boolean!
  message: String!
}

type SearchCollectionsResponse {
  datalist: [Collection!]!
}

type AddCollectionResponse {
  success: Boolean!
  message: String!
  newCollection: Collection
}

type UpdateCollectionResponse {
  success: Boolean!
  message: String!
  updatedCollection: Collection
}

type AllPhotosInCollectionResponse {
  collectionInfo: Collection!
  total: Int!
  photos: [Photo!]!
}

type PaginatedResponse {
  startCursor: Int!
  endCursor: Int!
  total: Int!
}

type SearchFinishesResponse {
  datalist: [Finish!]!
}

type GroupedPhotosWithFinishResponse {
  photos: [Photo!]!
  finishInfo: Finish!
}

type PaginatedPhotosWithFinishResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
  finishInfo: Finish!
}

type AddFinishResponse {
  success: Boolean!
  message: String!
  newFinish: Finish
}

type UpdateFinishResponse {
  success: Boolean!
  message: String!
  updatedFinish: Finish
}

type AddImageResponse {
  success: Boolean!
  message: String!
  newImage: Image
}

type UpdateImageResponse {
  success: Boolean!
  message: String!
  updatedImage: Image
}

type SearchLocationsResponse {
  datalist: [Location!]!
}

type LocationsResponse {
  locations: [Location!]!
}

type AllPhotosAtLocationResponse {
  locationInfo: Location!
  total: Int!
  photos: [Photo!]!
}

type GroupedPhotosAtLocationResponse {
  photos: [Photo!]!
  locationInfo: Location!
}

type PaginatedPhotosAtLocationResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
  locationInfo: Location!
}

type AddLocationResponse {
  success: Boolean!
  message: String!
  newLocation: Location
}

type UpdateLocationResponse {
  success: Boolean!
  message: String!
  updatedLocation: Location
}

type ItemCountList {
  itemCountList: [ItemCount!]!
}

type ItemCount {
  name: String
  count: Int!
}

type SearchPhotographersResponse {
  datalist: [Photographer!]!
}

type PhotographersResponse {
  photographers: [Photographer!]!
}

type AllPhotosByPhotographerResponse {
  photographerInfo: Photographer!
  total: Int!
  photos: [Photo!]!
}

type GroupedPhotosByPhotographerResponse {
  photos: [Photo!]!
  photographerInfo: Photographer!
}

type PaginatedPhotosByPhotographerResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
  photographerInfo: Photographer!
}

type AddPhotographerResponse {
  success: Boolean!
  message: String!
  newPhotographer: Photographer
}

type UpdatePhotographerResponse {
  success: Boolean!
  message: String!
  updatedPhotographer: Photographer
}

type SelectionOption {
  id: Int!
  name: String!
}

type PhotosResponse {
  photos: [Photo!]!
}

type PhotographerSelectionOption {
  id: Int!
  name: String!
}

type LocationSelectionOption {
  id: Int!
  name: String!
}

type SubjectSelectionOption {
  id: Int!
  name: String!
}

type TagSelectionOption {
  id: Int!
  name: String!
}

type CollectionSelectionOption {
  id: Int!
  name: String!
}

type FinishSelectionOption {
  id: Int!
  name: String!
}

type PhotoEditSelectionOptions {
  photographers: [PhotographerSelectionOption!]!
  locations: [LocationSelectionOption!]!
  subjects: [SubjectSelectionOption!]!
  tags: [TagSelectionOption!]!
  collections: [CollectionSelectionOption!]!
  finishes: [FinishSelectionOption!]!
}

type SearchPhotosResponse {
  datalist: [Photo!]!
}

type PaginatedAllPhotosResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
}

type PaginatedFeaturedPhotosResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
}

type AddPhotoResponse {
  success: Boolean!
  message: String!
  newPhoto: Photo
}

type UpdatePhotoResponse {
  success: Boolean!
  message: String!
  updatedPhoto: Photo
}

type AllFeaturedPhotosResponse {
  total: Int!
  photos: [Photo!]!
}

type SubjectsResponse {
  subjects: [Subject!]!
}

type SearchSubjectsResponse {
  datalist: [Subject!]!
}

type AllPhotosOfSubjectResponse {
  subjectInfo: Subject!
  total: Int!
  photos: [Photo!]!
}

type GroupedPhotosOfSubjectResponse {
  photos: [Photo!]!
  subjectInfo: Subject!
}

type PaginatedPhotosOfSubjectResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
  subjectInfo: Subject!
}

type AddSubjectResponse {
  success: Boolean!
  message: String!
  newSubject: Subject
}

type UpdateSubjectResponse {
  success: Boolean!
  message: String!
  updatedSubject: Subject
}

type SearchTagsResponse {
  datalist: [Tag!]!
}

type AllPhotosWithTagResponse {
  tagInfo: Tag!
  total: Int!
  photos: [Photo!]!
}

type GroupedPhotosWithTagResponse {
  photos: [Photo!]!
  tagInfo: Tag!
}

type PaginatedPhotosWithTagResponse {
  photos: [Photo!]!
  pageInfo: PaginatedResponse!
  tagInfo: Tag!
}

type AddTagResponse {
  success: Boolean!
  message: String!
  newTag: Tag
}

type UpdateTagResponse {
  success: Boolean!
  message: String!
  updatedTag: Tag
}

type FavoritesResponse {
  # Returns list of Photo objects in user's favorites.
  photoList: [Photo!]
}

type AddPhotoToFavoritesResponse {
  success: Boolean!
  message: String!
  addedPhotoWithId: ID
}

type RemovePhotoFromFavoritesResponse {
  success: Boolean!
  message: String!
  removedPhotoWithId: ID
}

type ShoppingBagItemsResponse {
  # Returns list of Photo objects in user's shopping bag.
  photoList: [Photo!]
}

type AddPhotoToShoppingBagResponse {
  success: Boolean!
  message: String!
  addedPhotoWithId: ID
}

type RemovePhotoFromShoppingBagResponse {
  success: Boolean!
  message: String!
  removedPhotoWithId: ID
}

type UserPreferencesResponse {
  favorites: [UserFavorite!]
  shoppingBagItems: [UserShoppingBagItem!]
}

# Inputs to create a new Collection.
input AddCollectionInput {
  # Name of the collection. Used in Photo Info links.
  name: String!
  tag: String!

  # A vignette used to introduce the subject.
  description: String!

  # A cover image to be displayed next to the opening vignette.
  coverImageId: Int
}

# Optional inputs to be used to update the Collection Info.
input UpdateCollectionInput {
  # Optional. Name of the collection. Used in Photo Info links.
  name: String

  # An optional tag for the collection.
  tag: String

  # Optional. A vignette used to introduce the subject.
  description: String

  # Optional. A cover image to be displayed next to the opening vignette.
  coverImageId: Float
}

input SearchCollectionsInput {
  searchString: String!
}

input AllPhotosInCollectionInput {
  name: String
  id: Float
}

input AddFinishInput {
  name: String!
  description: String!
  coverImageId: Float
  finSku: String!
  width: Float!
  height: Float!
  depth: Float!
  weight: Float!
  shippingWeight: Float!
  basePrice: Float!
  priceModifier: Float!
}

input UpdateFinishInput {
  name: String
  description: String
  coverImageId: Float
  finSku: String
  width: Float
  height: Float
  depth: Float
  weight: Float
  shippingWeight: Float
  basePrice: Float
  priceModifier: Float
}

input SearchFinishesInput {
  searchString: String!
}

input GroupedPhotosWithFinishInput {
  id: Float
  name: String
}

input PaginatedPhotosWithFinishInput {
  name: String
  id: Float
  cursor: Int
  take: Int!
}

input AddImageInput {
  imageName: String = "New Image"
  fileExtension: String = "XL"
  imageUrl: String = ""
  altText: String = "new image"
  size: String = "XL"
  width: Int = 0
  height: Int = 0
  photoId: Float
}

input UpdateImageInput {
  imageName: String
  fileExtension: String
  imageUrl: String
  altText: String
  size: String
  width: Int
  height: Int
  photoId: Float
}

# Inputs to create a new Location entity.
input AddLocationInput {
  # Name of the location.
  name: String!

  # Tag used to ID the location in Photo Info links.
  tag: String!

  # Vignette describing the location.
  description: String!

  # id for cover image.
  coverImageId: Int
}

# Optional inputs to be used to update the Location Info.
input UpdateLocationInput {
  # Optional. Name of the Location.
  name: String

  # Optional. Tag used to identify the Location.
  tag: String

  # Vignette describing the location.
  description: String

  # Map of the location. Used at the top of the Location's Photo Gallery. Used to look up the Map and add it to the One-to-One relationship.
  coverImageId: Float
}

input SearchLocationsInput {
  searchString: String!
}

input LocationSearchSortInput {
  filter: String
  orderBy: String = "name"
  direction: SortDirection = ASC
}

# Sort direction
enum SortDirection {
  ASC
  DESC
}

input AllPhotosAtLocationInput {
  name: String
  id: Float
}

input GroupedPhotosAtLocationInput {
  name: String
  id: Float
}

input PaginatedPhotosAtLocationInput {
  name: String
  id: Float
  cursor: Int
  take: Int!
}

input PhotoCollectionInput {
  photoId: Int!
  collectionId: Int!
}

input PhotoFinishInput {
  photoId: Int!
  finishId: Int!
}

# Inputs to create a new Photographer entity.
input AddPhotographerInput {
  # Photographer's full name.
  name: String!

  # Photographer's first name.
  firstName: String!

  # Photographer's last name.
  lastName: String!

  # Photographer's email address.
  email: String!

  # Short biography for Photographer. Displayed at the top of the Photographer's photo gallery.
  bio: String!

  # id for cover image.
  coverImageId: Int
}

# Inputs to update a Photographer entity.
input UpdatePhotographerInput {
  # Optional: Photographer's full name.
  name: String

  # Optional: Photographer's first name.
  firstName: String

  # Optional: Photographer's last name.
  lastName: String

  # Optional: Photographer's email address.
  email: String

  # Optional: Short biography for Photographer. Displayed at the top of the Photographer's photo gallery.
  bio: String

  # id for cover image.
  coverImageId: Int
}

input SearchPhotographersInput {
  searchString: String!
}

input AllPhotosByPhotographerInput {
  id: Float
  name: String
}

input GroupedPhotosByPhotographerInput {
  id: Float
  name: String
}

input PaginatedPhotosByPhotographerInput {
  id: Float
  name: String
  cursor: Int
  take: Int!
}

input AddPhotoInput {
  title: String = "Untitled"
  description: String = "No description provided."
  isFeatured: Boolean = false
  isLimitedEdition: Boolean = false
  rating: Int = 5
  basePrice: Float = 375
  priceModifier: Float = 0
  photographerId: Int
  locationId: Int
  subjectIds: [Int!]
  tagIds: [Int!]
  collectionIds: [Int!]
  finishIds: [Int!]
  imageId: Int
}

input UpdatePhotoInput {
  title: String
  description: String
  isHidden: Boolean
  isFeatured: Boolean
  isLimitedEdition: Boolean
  rating: Int
  basePrice: Float
  priceModifier: Float
  imageId: Int
  photographerId: Int
  locationId: Int
  subjectIds: [Int!]
  tagIds: [Int!]
  collectionIds: [Int!]
  finishIds: [Int!]
}

input PhotoSearchSortInput {
  filter: String
  orderBy: String = "sortIndex"
  direction: SortDirection = ASC
}

input SearchPhotosInput {
  searchString: String!
}

input PaginatedPhotosInput {
  cursor: Int
  take: Int!
}

# Inputs to create a new Subject entity.
input AddSubjectInput {
  # Name of the subject. Used in Photo Info links.
  name: String!

  # A vignette used to introduce the subject.
  description: String

  # A cover image to be displayed next to the opening vignette.
  coverImageId: Int
}

# Optional inputs to be used to update the Subject Info.
input UpdateSubjectInput {
  # Optional. Name of the subject. Used in Photo Info links.
  name: String

  # Optional. A vignette used to introduce the subject.
  description: String

  # Optional. A cover image to be displayed next to the opening vignette.
  coverImageId: Float
}

input SubjectSearchSortInput {
  filter: String
  orderBy: String = "name"
  direction: SortDirection = ASC
}

input SearchSubjectsInput {
  searchString: String!
}

input AllPhotosOfSubjectInput {
  name: String!
}

input GroupedPhotosOfSubjectInput {
  id: Float
  name: String
}

input PaginatedPhotosOfSubjectInput {
  name: String
  id: Float
  cursor: Int
  take: Int!
}

# Inputs to create a new Tag entity.
input AddTagInput {
  # Name of the tag. Used in Photo Info links.
  name: String!

  # A vignette used to introduce the tag.
  description: String!

  # A cover image to be displayed nest to the opening vignette.
  coverImageId: Int
}

# Optional inputs to be used to update the Tag Info.
input UpdateTagInput {
  # Optional. Name of the tag. Used in Photo Info links.
  name: String

  # Optional. A vignette used to introduce the subject.
  description: String

  # Optional. A cover image to be displayed next to the opening vignette.
  coverImageId: Float
}

input SearchTagsInput {
  searchString: String!
}

input AllPhotosWithTagInput {
  id: Float
  name: String
}

input GroupedPhotosWithTagInput {
  id: Float
  name: String
}

input PaginatedPhotosWithTagInput {
  name: String
  id: Float
  cursor: Int
  take: Int!
}

input GetApiTokenInput {
  userId: Float!
  email: String!
}

type Query {
  # Search collections. Returns Collection + Cover Image.
  searchCollections(input: SearchCollectionsInput!): SearchCollectionsResponse!
  collectionsWithPhotos: [Collection!]!
  collection(id: Int!): Collection!
  collectionWithPhotos(id: Int!): Collection!
  allPhotosInCollection(input: AllPhotosInCollectionInput!): AllPhotosInCollectionResponse!

  # Search Finishes. Returns Finish + Cover Image.
  searchFinishes(input: SearchFinishesInput!): SearchFinishesResponse!
  finish(id: Int!): Finish!
  groupedPhotosWithFinish(input: GroupedPhotosWithFinishInput!): GroupedPhotosWithFinishResponse!
  paginatedPhotosWithFinish(input: PaginatedPhotosWithFinishInput!): PaginatedPhotosWithFinishResponse!
  images: [Image!]!
  image(id: Int!): Image!

  # Returns all Locations + cover images. Sortable and filterable.
  locations(input: LocationSearchSortInput!): LocationsResponse!

  # Search locations. Returns Location + Cover Image.
  searchLocations(input: SearchLocationsInput!): SearchLocationsResponse!

  # Returns one Location + portrait, only or null, if no matching id is found. Meant to be used on the backend.
  location(id: Int!): Location

  # Returns one Location + portrait, only or null, if no matching name is found.
  locationWithName(name: String!): Location
  groupedPhotosAtLocation(input: GroupedPhotosAtLocationInput!): GroupedPhotosAtLocationResponse!
  paginatedPhotosAtLocation(input: PaginatedPhotosAtLocationInput!): PaginatedPhotosAtLocationResponse!
  allPhotosAtLocation(input: AllPhotosAtLocationInput!): AllPhotosAtLocationResponse!
  photoCountBySubject: ItemCountList!
  photoCountByTag: ItemCountList!
  photoCountByCollection: ItemCountList!
  photoCountByLocation: ItemCountList!
  photoCountByPhotographer: ItemCountList!

  # Returns all Photographers + portraits, only. Meant to be used on the backend.
  searchPhotographers(input: SearchPhotographersInput!): SearchPhotographersResponse!

  # Returns all Photographers + portraits, only. Meant to be used on the backend.
  sortedPhotographers(asc: Boolean!, orderBy: String!, filter: String!): PhotographersResponse!

  # Returns one Photographer + portrait, only or null, if no matching id is found. Meant to be used on the backend.
  photographer(id: Int!): Photographer

  # Returns one Photographer + portrait AND Photographer's Photos and related data. Meant to be used on the frontend. Used for the Photographer's Gallery.
  photographerWithName(name: String!): Photographer
  groupedPhotosByPhotographer(input: GroupedPhotosByPhotographerInput!): GroupedPhotosByPhotographerResponse!
  paginatedPhotosByPhotographer(input: PaginatedPhotosByPhotographerInput!): PaginatedPhotosByPhotographerResponse!
  allPhotosByPhotographer(input: AllPhotosByPhotographerInput!): AllPhotosByPhotographerResponse!

  # Returns all Photos + all relations. Sortable and filterable.
  photos(input: PhotoSearchSortInput!): PhotosResponse!

  # Returns all Photos + all relations. Searchable.
  searchPhotos(input: SearchPhotosInput!): SearchPhotosResponse!
  paginatedPhotos(input: PaginatedPhotosInput!): PaginatedAllPhotosResponse!
  paginatedFeaturedPhotos(input: PaginatedPhotosInput!): PaginatedFeaturedPhotosResponse!
  allFeaturedPhotos: AllFeaturedPhotosResponse!
  photo(id: Int!): Photo
  photoWithSku(sku: Int!): Photo!
  photoEditOptions: PhotoEditSelectionOptions!
  userSearch(phrase: String!): [UserSearchResult!]!

  # Returns all Subjects + cover images. Sortable and filterable.
  subjects(input: SubjectSearchSortInput!): SubjectsResponse!

  # Search subjects. Returns Subjects + Cover Image.
  searchSubjects(input: SearchSubjectsInput!): SearchSubjectsResponse!
  subject(id: Int!): Subject
  subjectWithName(name: String!): Subject
  groupedPhotosOfSubject(input: GroupedPhotosOfSubjectInput!): GroupedPhotosOfSubjectResponse!
  paginatedPhotosOfSubject(input: PaginatedPhotosOfSubjectInput!): PaginatedPhotosOfSubjectResponse!
  allPhotosOfSubject(input: AllPhotosOfSubjectInput!): AllPhotosOfSubjectResponse!

  # Search tags. Returns tag + Cover Image.
  searchTags(input: SearchTagsInput!): SearchTagsResponse!
  tag(id: Int!): Tag!
  tagWithName(name: String!): Tag
  groupedPhotosWithTag(input: GroupedPhotosWithTagInput!): GroupedPhotosWithTagResponse!
  paginatedPhotosWithTag(input: PaginatedPhotosWithTagInput!): PaginatedPhotosWithTagResponse!
  allPhotosWithTag(input: AllPhotosWithTagInput!): AllPhotosWithTagResponse!

  # Returns all Photos favorited by the signed in User.
  favorites: FavoritesResponse!

  # Returns all Photos in the shopping bag of the signed in User.
  shoppingBagItems: ShoppingBagItemsResponse!
  users: [User!]!
  user(id: Int!): User!
  userSummaries: [User!]!
  newsletterSubscribers: [User!]!
  getUserPreferences: UserPreferencesResponse!
}

union UserSearchResult = Subject | Tag | Location

type Mutation {
  addCollection(input: AddCollectionInput!): AddCollectionResponse!
  updateCollection(input: UpdateCollectionInput!, id: Int!): UpdateCollectionResponse!
  deleteCollection(id: Int!): Boolean!
  addFinish(input: AddFinishInput!): AddFinishResponse!
  updateFinish(input: UpdateFinishInput!, id: Int!): UpdateFinishResponse!
  deleteFinish(id: Int!): Boolean!
  addImage(input: AddImageInput!): AddImageResponse!
  updateImage(input: UpdateImageInput!, id: Int!): UpdateImageResponse!
  deleteImage(id: Int!): Boolean!
  addImageToPhoto(imageId: Int!, photoId: Int!): Image!
  addLocation(input: AddLocationInput!): AddLocationResponse!
  updateLocation(input: UpdateLocationInput!, id: Int!): UpdateLocationResponse!
  deleteLocation(id: Int!): Boolean!
  addPhotoToCollection(input: PhotoCollectionInput!): Boolean!
  removePhotoFromCollection(input: PhotoCollectionInput!): Boolean!
  addFinishToPhoto(input: PhotoFinishInput!): Boolean!
  removeFinishFromPhoto(input: PhotoFinishInput!): Boolean!
  addPhotographer(input: AddPhotographerInput!): AddPhotographerResponse!
  updatePhotographer(input: UpdatePhotographerInput!, id: Int!): UpdatePhotographerResponse!
  deletePhotographer(id: Int!): Boolean!
  addPhoto(input: AddPhotoInput!): AddPhotoResponse!
  updatePhoto(input: UpdatePhotoInput!, id: Int!): UpdatePhotoResponse!
  deletePhoto(id: Int!): Boolean!
  addSubject(input: AddSubjectInput!): AddSubjectResponse!
  updateSubject(input: UpdateSubjectInput!, id: Int!): UpdateSubjectResponse!
  deleteSubject(id: Int!): Boolean!
  subscribeToNewsletter: SuccessMessageResponse!
  unsubscribeFromNewsletter: SuccessMessageResponse!
  addTag(input: AddTagInput!): AddTagResponse!
  updateTag(input: UpdateTagInput!, id: Int!): UpdateTagResponse!
  deleteTag(id: Int!): Boolean!
  addPhotoToFavorites(photoId: Float!): AddPhotoToFavoritesResponse!
  removePhotoFromFavorites(photoId: Float!): RemovePhotoFromFavoritesResponse!
  addPhotoToShoppingBag(photoId: Float!): AddPhotoToShoppingBagResponse!
  removePhotoFromShoppingBag(photoId: Float!): RemovePhotoFromShoppingBagResponse!
  getApiToken(input: GetApiTokenInput!): String!
}
